/usr/bin/env time -v /packages/apps/vtr/8.0.0-git/build/bin/yosys -c synthesis.tcl

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.32 (git sha1 UNKNOWN, clang  -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `add' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `aigmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `alumacc' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `anlogic_eqn' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `anlogic_fixcarry' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `assertpmux' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `async2sync' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `attrmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `attrmvcp' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `autoname' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `blackbox' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `bmuxmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `bugpoint' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `bwmuxmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `check' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `chformal' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `chparam' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `chtype' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `clean' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `clean_zerowidth' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `clk2fflogic' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `clkbufmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `connect' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `connect_rpc' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `connwrappers' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `coolrunner2_fixup' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `coolrunner2_sop' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `copy' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `cover' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `cutpoint' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `debug' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `delete' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `deminout' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `demuxmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `design' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `dffinit' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `dfflegalize' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `dfflibmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `dffunmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `dump' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `echo' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `ecp5_gsr' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `edgetypes' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `efinix_fixcarry' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_add' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_induct' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_make' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_mark' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_miter' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_opt' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_purge' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_remove' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_simple' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_status' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `equiv_struct' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `expose' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `extract' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `extract_counter' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `extract_fa' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `extract_reduce' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `extractinv' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `flatten' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `flowmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fmcombine' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fminit' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `formalff' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `freduce' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm_detect' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm_expand' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm_export' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm_extract' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm_info' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm_map' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm_opt' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fsm_recode' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `fst2tb' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `gatemate_foldinv' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `glift' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `greenpak4_dffinv' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `help' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `hierarchy' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `hilomap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `history' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `ice40_braminit' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `ice40_dsp' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `ice40_opt' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `ice40_wrapcarry' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `insbuf' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `iopadmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `jny' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `json' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `log' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `logger' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `ls' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `ltp' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `lut2mux' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `maccmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_bmux2rom' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_bram' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_collect' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_dff' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_libmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_map' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_memx' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_narrow' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_nordff' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_share' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `memory_unpack' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `miter' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `mutate' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `muxcover' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `muxpack' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `nlutmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `onehot' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_clean' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_demorgan' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_dff' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_expr' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_ffinv' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_lut' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_lut_ins' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_mem' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_mem_feedback' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_mem_priority' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_mem_widen' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_merge' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_muxtree' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_reduce' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `opt_share' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `paramap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `peepopt' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `plugin' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `pmux2shiftx' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `pmuxtree' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `portlist' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `prep' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `printattrs' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_arst' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_clean' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_dff' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_dlatch' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_init' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_memwr' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_mux' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_prune' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_rmdead' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `proc_rom' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `qbfsat' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `qwp' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read_aiger' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read_blif' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read_ilang' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read_json' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read_liberty' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read_rtlil' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read_verilog' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `recover_names' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `rename' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `rmports' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `sat' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `scatter' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `scc' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `scratchpad' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `script' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `select' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `setattr' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `setparam' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `setundef' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `share' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `shell' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `show' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `shregmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `sim' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `simplemap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `splice' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `splitcells' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `splitnets' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `sta' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `stat' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `submod' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `supercover' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_achronix' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_anlogic' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_coolrunner2' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_easic' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_ecp5' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_efinix' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_fabulous' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_gatemate' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_gowin' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_greenpak4' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_ice40' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_intel' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_intel_alm' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_machxo2' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_nexus' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_quicklogic' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_sf2' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synth_xilinx' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `synthprop' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `tcl' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `techmap' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `tee' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `test_abcloop' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `test_autotb' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `test_cell' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `test_pmgen' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `torder' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `tribuf' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `uniquify' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `verific' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `verilog_defaults' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `verilog_defines' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `viz' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `wbflip' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `wreduce' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_aiger' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_blif' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_btor' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_cxxrtl' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_edif' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_file' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_firrtl' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_ilang' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_intersynth' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_jny' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_json' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_rtlil' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_simplec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_smt2' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_smv' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_spice' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_table' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_verilog' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `write_xaiger' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `xilinx_dffopt' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `xilinx_dsp' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `xilinx_srl' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `xprop' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `zinit' -> skip.

1. Executing Verilog-2005 frontend: /packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/vtr_primitives.v
Using parmys as partial mapper
Using Yosys read_verilog command
Parsing Verilog input from `/packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/vtr_primitives.v' to AST representation.
Generating RTLIL representation for module `\LUT_K'.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\mux'.
Generating RTLIL representation for module `\adder'.
Generating RTLIL representation for module `\multiply'.
Generating RTLIL representation for module `\single_port_ram'.
Generating RTLIL representation for module `\dual_port_ram'.
Successfully finished Verilog frontend.
parmys_arch pass finished.

2. Executing Verilog-2005 frontend: sha.v
Parsing SystemVerilog input from `sha.v' to AST representation.
Generating RTLIL representation for module `\sha1'.
Successfully finished Verilog frontend.

3. Executing SCC pass (detecting logic loops).
Skipping module \sha1 as it contains processes (run 'proc' pass first).
Skipping module \dual_port_ram as it contains processes (run 'proc' pass first).
Skipping module \single_port_ram as it contains processes (run 'proc' pass first).
Found 0 SCCs in module multiply.
Found 0 SCCs in module adder.
Found 0 SCCs in module mux.
Found 0 SCCs in module fpga_interconnect.
Skipping module \DFF as it contains processes (run 'proc' pass first).
Found 0 SCCs in module LUT_K.
Found 0 SCCs.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Finding top of design hierarchy..
root of   0 design levels: sha1                
root of   0 design levels: dual_port_ram       
root of   0 design levels: single_port_ram     
root of   0 design levels: multiply            
root of   0 design levels: adder               
root of   0 design levels: mux                 
root of   0 design levels: fpga_interconnect   
root of   0 design levels: DFF                 
root of   0 design levels: LUT_K               
Automatically selected sha1 as design top module.

4.2. Analyzing design hierarchy..
Top module:  \sha1

4.3. Analyzing design hierarchy..
Top module:  \sha1
Removing unused module `\dual_port_ram'.
Removing unused module `\single_port_ram'.
Removing unused module `\multiply'.
Removing unused module `\adder'.
Removing unused module `\mux'.
Removing unused module `\fpga_interconnect'.
Removing unused module `\DFF'.
Removing unused module `\LUT_K'.
Removed 8 unused modules.

5. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Warning: Ignoring module sha1 because it contains processes (run 'proc' command first).

7. Executing CHECK pass (checking for obvious problems).
Checking module sha1...
Found and reported 0 problems.

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Warning: Ignoring module sha1 because it contains processes (run 'proc' command first).
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Warning: Ignoring module sha1 because it contains processes (run 'proc' command first).

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing PROC pass (convert processes to netlists).

9.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$sha.v:106$38 in module sha1.
Marked 4 switch rules as full_case in process $proc$sha.v:148$65 in module sha1.
Marked 4 switch rules as full_case in process $proc$sha.v:2110$71 in module sha1.
Marked 4 switch rules as full_case in process $proc$sha.v:2134$75 in module sha1.
Removed a total of 0 dead cases.

9.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

9.4. Executing PROC_INIT pass (extract init attributes).

9.5. Executing PROC_ARST pass (detect async resets in processes).

9.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sha1.$proc$sha.v:106$38'.
     1/3: $0\cmd[3:0] [2]
     2/3: $0\cmd[3:0] [1:0]
     3/3: $0\cmd[3:0] [3]
Creating decoders for process `\sha1.$proc$sha.v:148$65'.
     1/28: $0\round[6:0]
     2/28: $0\busy[0:0]
     3/28: $0\Wt[31:0]
     4/28: $0\W14[31:0]
     5/28: $0\W13[31:0]
     6/28: $0\W12[31:0]
     7/28: $0\W11[31:0]
     8/28: $0\W10[31:0]
     9/28: $0\W9[31:0]
    10/28: $0\W8[31:0]
    11/28: $0\W7[31:0]
    12/28: $0\W6[31:0]
    13/28: $0\W5[31:0]
    14/28: $0\W4[31:0]
    15/28: $0\W3[31:0]
    16/28: $0\W2[31:0]
    17/28: $0\W1[31:0]
    18/28: $0\W0[31:0]
    19/28: $0\H4[31:0]
    20/28: $0\H3[31:0]
    21/28: $0\H2[31:0]
    22/28: $0\H1[31:0]
    23/28: $0\H0[31:0]
    24/28: $0\E[31:0]
    25/28: $0\D[31:0]
    26/28: $0\C[31:0]
    27/28: $0\B[31:0]
    28/28: $0\A[31:0]
Creating decoders for process `\sha1.$proc$sha.v:2110$71'.
     1/1: $0\Kt[31:0]
Creating decoders for process `\sha1.$proc$sha.v:2134$75'.
     1/2: $0\read_counter[2:0]
     2/2: $0\text_o[31:0]

9.7. Executing PROC_DLATCH pass (convert process syncs to latches).

9.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sha1.\cmd' using process `\sha1.$proc$sha.v:106$38'.
  created $dff cell `$procdff$2393' with positive edge clock.
Creating register for signal `\sha1.\A' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2394' with positive edge clock.
Creating register for signal `\sha1.\B' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2395' with positive edge clock.
Creating register for signal `\sha1.\C' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2396' with positive edge clock.
Creating register for signal `\sha1.\D' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2397' with positive edge clock.
Creating register for signal `\sha1.\E' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2398' with positive edge clock.
Creating register for signal `\sha1.\round' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2399' with positive edge clock.
Creating register for signal `\sha1.\H0' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2400' with positive edge clock.
Creating register for signal `\sha1.\H1' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2401' with positive edge clock.
Creating register for signal `\sha1.\H2' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2402' with positive edge clock.
Creating register for signal `\sha1.\H3' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2403' with positive edge clock.
Creating register for signal `\sha1.\H4' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2404' with positive edge clock.
Creating register for signal `\sha1.\W0' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2405' with positive edge clock.
Creating register for signal `\sha1.\W1' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2406' with positive edge clock.
Creating register for signal `\sha1.\W2' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2407' with positive edge clock.
Creating register for signal `\sha1.\W3' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2408' with positive edge clock.
Creating register for signal `\sha1.\W4' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2409' with positive edge clock.
Creating register for signal `\sha1.\W5' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2410' with positive edge clock.
Creating register for signal `\sha1.\W6' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2411' with positive edge clock.
Creating register for signal `\sha1.\W7' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2412' with positive edge clock.
Creating register for signal `\sha1.\W8' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2413' with positive edge clock.
Creating register for signal `\sha1.\W9' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2414' with positive edge clock.
Creating register for signal `\sha1.\W10' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2415' with positive edge clock.
Creating register for signal `\sha1.\W11' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2416' with positive edge clock.
Creating register for signal `\sha1.\W12' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2417' with positive edge clock.
Creating register for signal `\sha1.\W13' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2418' with positive edge clock.
Creating register for signal `\sha1.\W14' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2419' with positive edge clock.
Creating register for signal `\sha1.\Wt' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2420' with positive edge clock.
Creating register for signal `\sha1.\busy' using process `\sha1.$proc$sha.v:148$65'.
  created $dff cell `$procdff$2421' with positive edge clock.
Creating register for signal `\sha1.\Kt' using process `\sha1.$proc$sha.v:2110$71'.
  created $dff cell `$procdff$2422' with positive edge clock.
Creating register for signal `\sha1.\text_o' using process `\sha1.$proc$sha.v:2134$75'.
  created $dff cell `$procdff$2423' with positive edge clock.
Creating register for signal `\sha1.\read_counter' using process `\sha1.$proc$sha.v:2134$75'.
  created $dff cell `$procdff$2424' with positive edge clock.

9.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

9.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\sha1.$proc$sha.v:106$38'.
Removing empty process `sha1.$proc$sha.v:106$38'.
Found and cleaned up 4 empty switches in `\sha1.$proc$sha.v:148$65'.
Removing empty process `sha1.$proc$sha.v:148$65'.
Found and cleaned up 4 empty switches in `\sha1.$proc$sha.v:2110$71'.
Removing empty process `sha1.$proc$sha.v:2110$71'.
Found and cleaned up 5 empty switches in `\sha1.$proc$sha.v:2134$75'.
Removing empty process `sha1.$proc$sha.v:2134$75'.
Cleaned up 16 empty switches.

9.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~33 debug messages>

10. Executing FSM pass (extract and optimize FSM).

10.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sha1.Kt as FSM state register:
    Users of register don't seem to benefit from recoding.

10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 6 unused cells and 113 unused wires.
<suppressed ~7 debug messages>

10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~4644 debug messages>
Removed a total of 1548 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
    New ctrl vector for $pmux cell $procmux$1078: { $procmux$1143_CMP $auto$opt_reduce.cc:134:opt_pmux$2426 }
    New ctrl vector for $pmux cell $procmux$794: { $procmux$173_CMP $auto$opt_reduce.cc:134:opt_pmux$2428 }
    New ctrl vector for $pmux cell $procmux$1895: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2430 $procmux$1896_CMP }
    New ctrl vector for $pmux cell $procmux$190: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2432 }
    New ctrl vector for $pmux cell $procmux$581: { $procmux$170_CMP $auto$opt_reduce.cc:134:opt_pmux$2434 }
    New ctrl vector for $pmux cell $procmux$2263: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2436 $procmux$1896_CMP }
    New ctrl vector for $pmux cell $procmux$2079: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2438 $procmux$1896_CMP }
    New ctrl vector for $pmux cell $procmux$1220: { $procmux$1285_CMP $auto$opt_reduce.cc:134:opt_pmux$2440 }
    New ctrl vector for $pmux cell $procmux$368: { $procmux$167_CMP $auto$opt_reduce.cc:134:opt_pmux$2442 }
    New ctrl vector for $pmux cell $procmux$1362: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2444 }
    New ctrl vector for $pmux cell $procmux$865: { $procmux$174_CMP $auto$opt_reduce.cc:134:opt_pmux$2446 }
    New ctrl vector for $pmux cell $procmux$1007: { $procmux$1072_CMP $auto$opt_reduce.cc:134:opt_pmux$2448 }
    New ctrl vector for $pmux cell $procmux$101: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2450 }
    New ctrl vector for $pmux cell $procmux$652: { $procmux$171_CMP $auto$opt_reduce.cc:134:opt_pmux$2452 }
    New ctrl vector for $pmux cell $procmux$1149: { $procmux$1214_CMP $auto$opt_reduce.cc:134:opt_pmux$2454 }
    New ctrl vector for $pmux cell $procmux$439: { $procmux$168_CMP $auto$opt_reduce.cc:134:opt_pmux$2456 }
    New ctrl vector for $pmux cell $procmux$1987: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2458 $procmux$1896_CMP }
    New ctrl vector for $pmux cell $procmux$1291: { $procmux$1356_CMP $auto$opt_reduce.cc:134:opt_pmux$2460 }
    New ctrl vector for $pmux cell $procmux$936: { $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$2462 }
    New ctrl vector for $pmux cell $procmux$2171: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2464 $procmux$1896_CMP }
    New ctrl vector for $pmux cell $procmux$723: { $procmux$172_CMP $auto$opt_reduce.cc:134:opt_pmux$2466 }
    New ctrl vector for $pmux cell $procmux$510: { $procmux$169_CMP $auto$opt_reduce.cc:134:opt_pmux$2468 }
    New ctrl vector for $pmux cell $procmux$279: { $procmux$1430_CMP $auto$opt_reduce.cc:134:opt_pmux$2472 $auto$opt_reduce.cc:134:opt_pmux$2470 }
  Optimizing cells in module \sha1.
Performed a total of 23 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$2424 ($dff) from module sha1 (D = $procmux$2372_Y [2], Q = \read_counter [2], rval = 1'0).
Adding SRST signal on $procdff$2424 ($dff) from module sha1 (D = $procmux$2369_Y [1:0], Q = \read_counter [1:0], rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$2474 ($sdff) from module sha1 (D = $sub$sha.v:2160$78_Y [1:0], Q = \read_counter [1:0]).
Adding EN signal on $auto$ff.cc:266:slice$2473 ($sdff) from module sha1 (D = $procmux$2372_Y [2], Q = \read_counter [2]).
Adding SRST signal on $procdff$2423 ($dff) from module sha1 (D = $procmux$2388_Y, Q = \text_o, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2489 ($sdff) from module sha1 (D = $procmux$2385_Y, Q = \text_o).
Adding SRST signal on $procdff$2422 ($dff) from module sha1 (D = { $procmux$2361_Y [30] $procmux$2361_Y [28:27] $procmux$2361_Y [25] $procmux$2361_Y [23] $procmux$2361_Y [17] $procmux$2361_Y [14:11] $procmux$2361_Y [8:7] $procmux$2361_Y [4:3] $procmux$2361_Y [0] }, Q = { \Kt [30] \Kt [28:27] \Kt [25] \Kt [23] \Kt [17] \Kt [14:11] \Kt [8:7] \Kt [4:3] \Kt [0] }, rval = 15'000000000000000).
Adding SRST signal on $procdff$2422 ($dff) from module sha1 (D = { $procmux$2358_Y [29] $procmux$2358_Y [26] $procmux$2358_Y [22] $procmux$2358_Y [20:19] $procmux$2358_Y [16:15] $procmux$2358_Y [9] $procmux$2358_Y [5] }, Q = { \Kt [29] \Kt [26] \Kt [22] \Kt [20:19] \Kt [16:15] \Kt [9] \Kt [5] }, rval = 9'000000000).
Adding SRST signal on $procdff$2422 ($dff) from module sha1 (D = { $procmux$2355_Y [31] $procmux$2355_Y [24] $procmux$2355_Y [21] $procmux$2355_Y [18] $procmux$2355_Y [10] $procmux$2355_Y [6] $procmux$2355_Y [2:1] }, Q = { \Kt [31] \Kt [24] \Kt [21] \Kt [18] \Kt [10] \Kt [6] \Kt [2:1] }, rval = 8'00000000).
Adding SRST signal on $procdff$2421 ($dff) from module sha1 (D = $procmux$190_Y, Q = \busy, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$2498 ($sdff) from module sha1 (D = $procmux$190_Y, Q = \busy).
Adding SRST signal on $procdff$2420 ($dff) from module sha1 (D = $procmux$279_Y, Q = \Wt, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2506 ($sdff) from module sha1 (D = $procmux$279_Y, Q = \Wt).
Adding SRST signal on $procdff$2419 ($dff) from module sha1 (D = $procmux$368_Y, Q = \W14, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2514 ($sdff) from module sha1 (D = $procmux$368_Y, Q = \W14).
Adding SRST signal on $procdff$2418 ($dff) from module sha1 (D = $procmux$439_Y, Q = \W13, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2518 ($sdff) from module sha1 (D = $procmux$439_Y, Q = \W13).
Adding SRST signal on $procdff$2417 ($dff) from module sha1 (D = $procmux$510_Y, Q = \W12, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2522 ($sdff) from module sha1 (D = $procmux$510_Y, Q = \W12).
Adding SRST signal on $procdff$2416 ($dff) from module sha1 (D = $procmux$581_Y, Q = \W11, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2526 ($sdff) from module sha1 (D = $procmux$581_Y, Q = \W11).
Adding SRST signal on $procdff$2415 ($dff) from module sha1 (D = $procmux$652_Y, Q = \W10, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2530 ($sdff) from module sha1 (D = $procmux$652_Y, Q = \W10).
Adding SRST signal on $procdff$2414 ($dff) from module sha1 (D = $procmux$723_Y, Q = \W9, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2534 ($sdff) from module sha1 (D = $procmux$723_Y, Q = \W9).
Adding SRST signal on $procdff$2413 ($dff) from module sha1 (D = $procmux$794_Y, Q = \W8, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2538 ($sdff) from module sha1 (D = $procmux$794_Y, Q = \W8).
Adding SRST signal on $procdff$2412 ($dff) from module sha1 (D = $procmux$865_Y, Q = \W7, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2542 ($sdff) from module sha1 (D = $procmux$865_Y, Q = \W7).
Adding SRST signal on $procdff$2411 ($dff) from module sha1 (D = $procmux$936_Y, Q = \W6, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2546 ($sdff) from module sha1 (D = $procmux$936_Y, Q = \W6).
Adding SRST signal on $procdff$2410 ($dff) from module sha1 (D = $procmux$1007_Y, Q = \W5, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2550 ($sdff) from module sha1 (D = $procmux$1007_Y, Q = \W5).
Adding SRST signal on $procdff$2409 ($dff) from module sha1 (D = $procmux$1078_Y, Q = \W4, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2554 ($sdff) from module sha1 (D = $procmux$1078_Y, Q = \W4).
Adding SRST signal on $procdff$2408 ($dff) from module sha1 (D = $procmux$1149_Y, Q = \W3, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2558 ($sdff) from module sha1 (D = $procmux$1149_Y, Q = \W3).
Adding SRST signal on $procdff$2407 ($dff) from module sha1 (D = $procmux$1220_Y, Q = \W2, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2562 ($sdff) from module sha1 (D = $procmux$1220_Y, Q = \W2).
Adding SRST signal on $procdff$2406 ($dff) from module sha1 (D = $procmux$1291_Y, Q = \W1, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2566 ($sdff) from module sha1 (D = $procmux$1291_Y, Q = \W1).
Adding SRST signal on $procdff$2405 ($dff) from module sha1 (D = $procmux$1362_Y, Q = \W0, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2570 ($sdff) from module sha1 (D = $procmux$1362_Y, Q = \W0).
Adding SRST signal on $procdff$2404 ($dff) from module sha1 (D = $procmux$1521_Y, Q = \H4, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2578 ($sdff) from module sha1 (D = $procmux$1516_Y, Q = \H4).
Adding SRST signal on $procdff$2403 ($dff) from module sha1 (D = $procmux$1613_Y, Q = \H3, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2582 ($sdff) from module sha1 (D = $procmux$1608_Y, Q = \H3).
Adding SRST signal on $procdff$2402 ($dff) from module sha1 (D = $procmux$1705_Y, Q = \H2, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2586 ($sdff) from module sha1 (D = $procmux$1700_Y, Q = \H2).
Adding SRST signal on $procdff$2401 ($dff) from module sha1 (D = $procmux$1797_Y, Q = \H1, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2590 ($sdff) from module sha1 (D = $procmux$1792_Y, Q = \H1).
Adding SRST signal on $procdff$2400 ($dff) from module sha1 (D = $procmux$1889_Y, Q = \H0, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2594 ($sdff) from module sha1 (D = $procmux$1884_Y, Q = \H0).
Adding SRST signal on $procdff$2399 ($dff) from module sha1 (D = $procmux$101_Y, Q = \round, rval = 7'0000000).
Adding SRST signal on $procdff$2398 ($dff) from module sha1 (D = $procmux$1895_Y, Q = \E, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2599 ($sdff) from module sha1 (D = $procmux$1895_Y, Q = \E).
Adding SRST signal on $procdff$2397 ($dff) from module sha1 (D = $procmux$1987_Y, Q = \D, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2609 ($sdff) from module sha1 (D = $procmux$1987_Y, Q = \D).
Adding SRST signal on $procdff$2396 ($dff) from module sha1 (D = $procmux$2079_Y, Q = \C, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2619 ($sdff) from module sha1 (D = $procmux$2079_Y, Q = \C).
Adding SRST signal on $procdff$2395 ($dff) from module sha1 (D = $procmux$2171_Y, Q = \B, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2629 ($sdff) from module sha1 (D = $procmux$2171_Y, Q = \B).
Adding SRST signal on $procdff$2394 ($dff) from module sha1 (D = $procmux$2263_Y, Q = \A, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2639 ($sdff) from module sha1 (D = $procmux$2263_Y, Q = \A).
Adding SRST signal on $procdff$2393 ($dff) from module sha1 (D = { $procmux$94_Y $procmux$80_Y $procmux$88_Y }, Q = \cmd, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$2649 ($sdff) from module sha1 (D = \busy, Q = \cmd [3]).
Adding EN signal on $auto$ff.cc:266:slice$2649 ($sdff) from module sha1 (D = \cmd_i [2], Q = \cmd [2]).
Adding EN signal on $auto$ff.cc:266:slice$2649 ($sdff) from module sha1 (D = $procmux$88_Y, Q = \cmd [1:0]).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 47 unused cells and 1614 unused wires.
<suppressed ~48 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~23 debug messages>

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

11.16. Rerunning OPT passes. (Maybe there is more to do..)

11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

11.20. Executing OPT_DFF pass (perform DFF optimizations).

11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

11.23. Finished OPT passes. (There is nothing left to do.)

12. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 7) from port B of cell sha1.$lt$sha.v:131$51 ($lt).
Removed top 1 bits (of 7) from port B of cell sha1.$lt$sha.v:131$52 ($lt).
Removed top 31 bits (of 32) from port B of cell sha1.$add$sha.v:143$64 ($add).
Removed top 25 bits (of 32) from port Y of cell sha1.$add$sha.v:143$64 ($add).
Removed top 1 bits (of 7) from port B of cell sha1.$lt$sha.v:2118$72 ($lt).
Removed top 6 bits (of 7) from port B of cell sha1.$sub$sha.v:2160$78 ($sub).
Removed top 4 bits (of 7) from port Y of cell sha1.$sub$sha.v:2160$78 ($sub).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$166_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$167_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$168_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$169_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$170_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$171_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$172_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell sha1.$procmux$173_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell sha1.$procmux$174_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1000_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell sha1.$procmux$1001_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1024_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1025_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1026_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1027_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1028_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1029_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1030_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1031_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1032_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1033_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1034_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1035_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1036_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1037_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1038_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1039_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1040_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1041_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1042_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1043_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1044_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1045_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1046_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1047_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1048_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1049_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1050_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1051_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1052_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1053_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1054_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell sha1.$procmux$1055_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1056_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1057_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1058_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1059_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1060_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1061_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1062_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1063_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1064_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1065_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1066_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1067_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1068_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1069_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell sha1.$procmux$1070_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell sha1.$procmux$1072_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell sha1.$procmux$1143_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell sha1.$procmux$1214_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell sha1.$procmux$1285_CMP0 ($eq).
Removed top 6 bits (of 7) from port B of cell sha1.$procmux$1356_CMP0 ($eq).
Removed top 1 bits (of 32) from mux cell sha1.$procmux$2355 ($mux).
Removed top 1 bits (of 32) from mux cell sha1.$procmux$2361 ($mux).
Removed top 2 bits (of 3) from port B of cell sha1.$procmux$2381_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sha1.$procmux$2382_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sha1.$procmux$2383_CMP0 ($eq).
Removed top 1 bits (of 32) from mux cell sha1.$procmux$2358 ($mux).
Removed top 1 bits (of 32) from wire sha1.$procmux$2355_Y.
Removed top 1 bits (of 32) from wire sha1.$procmux$2358_Y.
Removed top 1 bits (of 32) from wire sha1.$procmux$2361_Y.
Removed top 4 bits (of 7) from wire sha1.$sub$sha.v:2160$78_Y.

13. Executing PEEPOPT pass (run peephole optimizers).

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

15. Executing SHARE pass (SAT-based resource sharing).

16. Executing OPT pass (performing simple optimizations).

16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~43 debug messages>

16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
    Consolidated identical input bits for $mux cell $procmux$2355:
      Old ports: A=31'1001010011000101100000111010110, B=31'0001111000110111011110011011100, Y=$auto$wreduce.cc:461:run$2655 [30:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:461:run$2655 [3] $auto$wreduce.cc:461:run$2655 [1] }
      New connections: { $auto$wreduce.cc:461:run$2655 [30:4] $auto$wreduce.cc:461:run$2655 [2] $auto$wreduce.cc:461:run$2655 [0] } = { $auto$wreduce.cc:461:run$2655 [1] 3'001 $auto$wreduce.cc:461:run$2655 [3] 1'1 $auto$wreduce.cc:461:run$2655 [3] 1'0 $auto$wreduce.cc:461:run$2655 [1] $auto$wreduce.cc:461:run$2655 [1] $auto$wreduce.cc:461:run$2655 [3] $auto$wreduce.cc:461:run$2655 [3] 2'01 $auto$wreduce.cc:461:run$2655 [3] 1'1 $auto$wreduce.cc:461:run$2655 [1] $auto$wreduce.cc:461:run$2655 [3] $auto$wreduce.cc:461:run$2655 [3] $auto$wreduce.cc:461:run$2655 [3] $auto$wreduce.cc:461:run$2655 [3] 1'0 $auto$wreduce.cc:461:run$2655 [1] 6'110110 }
    New ctrl vector for $pmux cell $procmux$279: $auto$opt_reduce.cc:134:opt_pmux$2426
  Optimizing cells in module \sha1.
    Consolidated identical input bits for $mux cell $procmux$2358:
      Old ports: A=$auto$wreduce.cc:461:run$2655 [30:0], B=31'1101110110110011110101110100001, Y=$auto$wreduce.cc:461:run$2656 [30:0]
      New ports: A={ $auto$wreduce.cc:461:run$2655 [3] $auto$wreduce.cc:461:run$2655 [1] $auto$wreduce.cc:461:run$2655 [3] 1'1 $auto$wreduce.cc:461:run$2655 [1] 1'0 }, B=6'110001, Y={ $auto$wreduce.cc:461:run$2656 [11] $auto$wreduce.cc:461:run$2656 [8] $auto$wreduce.cc:461:run$2656 [3:0] }
      New connections: { $auto$wreduce.cc:461:run$2656 [30:12] $auto$wreduce.cc:461:run$2656 [10:9] $auto$wreduce.cc:461:run$2656 [7:4] } = { $auto$wreduce.cc:461:run$2656 [8] $auto$wreduce.cc:461:run$2656 [0] 2'01 $auto$wreduce.cc:461:run$2656 [11] 1'1 $auto$wreduce.cc:461:run$2656 [3] $auto$wreduce.cc:461:run$2656 [0] $auto$wreduce.cc:461:run$2656 [8] $auto$wreduce.cc:461:run$2656 [1] $auto$wreduce.cc:461:run$2656 [11] $auto$wreduce.cc:461:run$2656 [11] 1'0 $auto$wreduce.cc:461:run$2656 [2] $auto$wreduce.cc:461:run$2656 [11] 1'1 $auto$wreduce.cc:461:run$2656 [8] $auto$wreduce.cc:461:run$2656 [11] $auto$wreduce.cc:461:run$2656 [3] $auto$wreduce.cc:461:run$2656 [3] $auto$wreduce.cc:461:run$2656 [0] 1'1 $auto$wreduce.cc:461:run$2656 [2] $auto$wreduce.cc:461:run$2656 [0] $auto$wreduce.cc:461:run$2656 [2] }
  Optimizing cells in module \sha1.
    Consolidated identical input bits for $mux cell $procmux$2361:
      Old ports: A=$auto$wreduce.cc:461:run$2656 [30:0], B=31'1011010100000100111100110011001, Y=$auto$wreduce.cc:461:run$2657 [30:0]
      New ports: A={ 1'0 $auto$wreduce.cc:461:run$2656 [8] $auto$wreduce.cc:461:run$2656 [11] 1'1 $auto$wreduce.cc:461:run$2656 [11] $auto$wreduce.cc:461:run$2656 [3] $auto$wreduce.cc:461:run$2656 [8] $auto$wreduce.cc:461:run$2656 [0] $auto$wreduce.cc:461:run$2656 [2] $auto$wreduce.cc:461:run$2656 [3:0] }, B=13'1000101011001, Y={ $auto$wreduce.cc:461:run$2657 [28] $auto$wreduce.cc:461:run$2657 [22] $auto$wreduce.cc:461:run$2657 [16:15] $auto$wreduce.cc:461:run$2657 [11:10] $auto$wreduce.cc:461:run$2657 [8] $auto$wreduce.cc:461:run$2657 [5:0] }
      New connections: { $auto$wreduce.cc:461:run$2657 [30:29] $auto$wreduce.cc:461:run$2657 [27:23] $auto$wreduce.cc:461:run$2657 [21:17] $auto$wreduce.cc:461:run$2657 [14:12] $auto$wreduce.cc:461:run$2657 [9] $auto$wreduce.cc:461:run$2657 [7:6] } = { $auto$wreduce.cc:461:run$2657 [8] $auto$wreduce.cc:461:run$2657 [5] 1'1 $auto$wreduce.cc:461:run$2657 [16] 1'1 $auto$wreduce.cc:461:run$2657 [10] $auto$wreduce.cc:461:run$2657 [0] $auto$wreduce.cc:461:run$2657 [1] $auto$wreduce.cc:461:run$2657 [16] $auto$wreduce.cc:461:run$2657 [16] 1'0 $auto$wreduce.cc:461:run$2657 [4] $auto$wreduce.cc:461:run$2657 [8] $auto$wreduce.cc:461:run$2657 [11] $auto$wreduce.cc:461:run$2657 [3] $auto$wreduce.cc:461:run$2657 [5] 1'1 $auto$wreduce.cc:461:run$2657 [2] }
  Optimizing cells in module \sha1.
Performed a total of 4 changes.

16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

16.6. Executing OPT_SHARE pass.

16.7. Executing OPT_DFF pass (perform DFF optimizations).

16.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 1 unused cells and 15 unused wires.
<suppressed ~2 debug messages>

16.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

16.10. Rerunning OPT passes. (Maybe there is more to do..)

16.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

16.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

16.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

16.14. Executing OPT_SHARE pass.

16.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$2495 ($sdff) from module sha1.

16.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

16.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

16.18. Rerunning OPT passes. (Maybe there is more to do..)

16.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

16.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

16.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

16.22. Executing OPT_SHARE pass.

16.23. Executing OPT_DFF pass (perform DFF optimizations).

16.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

16.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

16.26. Finished OPT passes. (There is nothing left to do.)

17. Executing MEMORY pass.

17.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

17.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

17.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

17.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

17.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

17.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

17.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

17.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

17.10. Executing MEMORY_COLLECT pass (generating $mem cells).

18. Executing FLATTEN pass (flatten design).

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

19.6. Executing OPT_SHARE pass.

19.7. Executing OPT_DFF pass (perform DFF optimizations).

19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

19.10. Finished OPT passes. (There is nothing left to do.)

20. Executing TECHMAP pass (map to technology primitives).

20.1. Executing Verilog-2005 frontend: /packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/adff2dff.v
Parsing Verilog input from `/packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

21. Executing TECHMAP pass (map to technology primitives).

21.1. Executing Verilog-2005 frontend: /packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/adffe2dff.v
Parsing Verilog input from `/packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/adffe2dff.v' to AST representation.
Generating RTLIL representation for module `\adffe2dff'.
Successfully finished Verilog frontend.

21.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

22. Executing TECHMAP pass (map to technology primitives).

22.1. Executing Verilog-2005 frontend: /packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/aldff2dff.v
Parsing Verilog input from `/packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/aldff2dff.v' to AST representation.
Generating RTLIL representation for module `\aldff2dff'.
Successfully finished Verilog frontend.

22.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

23. Executing TECHMAP pass (map to technology primitives).

23.1. Executing Verilog-2005 frontend: /packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/aldffe2dff.v
Parsing Verilog input from `/packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/parmys/aldffe2dff.v' to AST representation.
Generating RTLIL representation for module `\aldffe2dff'.
Successfully finished Verilog frontend.

23.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

24.6. Executing OPT_SHARE pass.

24.7. Executing OPT_DFF pass (perform DFF optimizations).

24.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

24.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

24.10. Finished OPT passes. (There is nothing left to do.)

25. Starting parmys pass.
Reading Configuration file
Architecture: k6_frac_N10_mem32K_40nm.xml
Reading FPGA Architecture file
Using Lut input width of: 5
--------------------------------------------------------------------
Creating Odin-II Netlist from Design
--------------------------------------------------------------------
High-level Synthesis Begin

Elaboration Time: 0.2ms
--------------------------------------------------------------------
Successful Elaboration of the design by Odin-II
Performing Optimization on the Netlist

Optimization Time: 0.0ms
--------------------------------------------------------------------
Successful Optimization of netlist by Odin-II
Performing Partial Technology Mapping to the target device

Techmap Time: 1.9ms
--------------------------------------------------------------------
Successful Partial Technology Mapping by Odin-II

Total Synthesis Time: 2.1ms
--------------------------------------------------------------------

Hard Multiplier Distribution
============================


Total # of multipliers = 0

	==== Stats ====
Number of <INPUT_NODE> node:              38
Number of <OUTPUT_NODE> node:             36
Number of <LOGICAL_NOT> node:             2
Number of <LOGICAL_OR> node:              1
Number of <LOGICAL_AND> node:             10
Number of <LOGICAL_XNOR> node:            1
Number of <LOGICAL_XOR> node:             10
Number of <GENERIC> node:                 807
Total estimated number of lut:            2150
Total number of node:                     807
Longest path:                             211
Average path:                             4


--------------------------------------------------------------------
Updating the Design
--------------------------------------------------------------------
parmys pass finished.

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~6 debug messages>

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
    Consolidated identical input bits for $mux cell $auto$hard_block.cc:122:cell_hard_block$2690:
      Old ports: A={ $undef$3 $sdffe~14^Q~1 $sdffe~14^Q~0 }, B={ $sub~219^MIN~0^ADDER~6 $sub~219^MIN~0^ADDER~3 $sub~219^MIN~0^lXNOR~1 }, Y={ $mux~197^Y~2 $mux~197^Y~1 $mux~197^Y~0 }
      New ports: A={ $sdffe~14^Q~1 $sdffe~14^Q~0 }, B={ 1'x $sub~219^MIN~0^lXNOR~1 }, Y={ $mux~197^Y~1 $mux~197^Y~0 }
      New connections: $mux~197^Y~2 = 1'x
  Optimizing cells in module \sha1.
    Consolidated identical input bits for $mux cell $auto$hard_block.cc:122:cell_hard_block$2691:
      Old ports: A={ $mux~197^Y~2 $mux~197^Y~1 $mux~197^Y~0 }, B={ $undef$3 $sdffe~14^Q~1 $sdffe~14^Q~0 }, Y={ $mux~198^Y~2 $mux~198^Y~1 $mux~198^Y~0 }
      New ports: A={ $mux~197^Y~1 $mux~197^Y~0 }, B={ $sdffe~14^Q~1 $sdffe~14^Q~0 }, Y={ $mux~198^Y~1 $mux~198^Y~0 }
      New connections: $mux~198^Y~2 = 1'x
  Optimizing cells in module \sha1.
Performed a total of 2 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

26.6. Executing OPT_SHARE pass.

26.7. Executing OPT_DFF pass (perform DFF optimizations).

26.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 1 unused cells and 48 unused wires.
<suppressed ~2 debug messages>

26.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

26.10. Rerunning OPT passes. (Maybe there is more to do..)

26.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

26.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

26.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

26.14. Executing OPT_SHARE pass.

26.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 1 on $auto$hard_block.cc:122:cell_hard_block$2689 ($sdffe) from module sha1.

26.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

26.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~4 debug messages>

26.18. Rerunning OPT passes. (Maybe there is more to do..)

26.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 3/6 on $pmux $auto$hard_block.cc:122:cell_hard_block$2679.
    dead port 4/6 on $pmux $auto$hard_block.cc:122:cell_hard_block$2679.
Removed 2 multiplexer ports.
<suppressed ~34 debug messages>

26.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

26.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

26.22. Executing OPT_SHARE pass.

26.23. Executing OPT_DFF pass (perform DFF optimizations).

26.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

26.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

26.26. Rerunning OPT passes. (Maybe there is more to do..)

26.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

26.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

26.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

26.30. Executing OPT_SHARE pass.

26.31. Executing OPT_DFF pass (perform DFF optimizations).

26.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

26.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

26.34. Finished OPT passes. (There is nothing left to do.)

27. Executing TECHMAP pass (map to technology primitives).

27.1. Executing Verilog-2005 frontend: /packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/packages/apps/vtr/8.0.0-git/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $reduce_xor.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $sdff.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$b756e651b7db7aeb455331d9a2df073db93fcc2e\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_xnor.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$c4905825bb8ecc38b98eb4167e8b007447af7884\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1474 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~2024 debug messages>

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~2034 debug messages>
Removed a total of 678 cells.

28.3. Executing OPT_DFF pass (perform DFF optimizations).

28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 54 unused cells and 2950 unused wires.
<suppressed ~55 debug messages>

28.5. Finished fast OPT passes.

29. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

30.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

30.4. Finished fast OPT passes.

31. Printing statistics.

=== sha1 ===

   Number of wires:               5029
   Number of wire bits:           6760
   Number of public wires:          74
   Number of public wire bits:      74
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6592
     $_AND_                        601
     $_DFF_P_                      892
     $_MUX_                       3590
     $_NOT_                        137
     $_OR_                         544
     $_XOR_                        828

32. Executing HIERARCHY pass (managing design hierarchy).

32.1. Finding top of design hierarchy..
root of   0 design levels: sha1                
Automatically selected sha1 as design top module.

32.2. Analyzing design hierarchy..
Top module:  \sha1

32.3. Analyzing design hierarchy..
Top module:  \sha1
Removed 0 unused modules.

33. Executing BLIF backend.

Warnings: 1 unique messages, 3 total
End of script. Logfile hash: 261f217bec, CPU: user 1.35s system 0.01s, MEM: 48.20 MB peak
Yosys 0.32 (git sha1 UNKNOWN, clang  -fPIC -Os)
Time spent: 31% 25x opt_expr (0 sec), 14% 21x opt_clean (0 sec), ...
	Command being timed: "/packages/apps/vtr/8.0.0-git/build/bin/yosys -c synthesis.tcl"
	User time (seconds): 1.35
	System time (seconds): 0.01
	Percent of CPU this job got: 97%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.40
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 49356
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 11324
	Voluntary context switches: 77
	Involuntary context switches: 17
	Swaps: 0
	File system inputs: 0
	File system outputs: 1712
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
